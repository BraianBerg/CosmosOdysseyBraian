@page "/counter"
@using CosmosOdyssey.ApplicationServices
@using CosmosOdyssey.Core.Domain
@using CosmosOdyssey.Core.ViewModel
@inject IPriceListServices PriceService


<h1>Counter</h1>
<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="@CountAndPost">UPDATE DB</button>

@if (displayModel == null)
{
    <h2> Loading...</h2>
}
else
{
<div class="form-group">
    <label class="sr-only" for="filter-From">Filter</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="fromSearchString"
           placeholder="Filter By Location" />
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="toSearchString"
           placeholder="Filter By Destination" />
    <button type="button" class="btn btn-primary mb-2 mr-sm-2" @onclick="Filter">Fliter</button>
    <button type="button" class="btn btn-primary mb-2" @onclick="clear">Clear</button>

</div>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>From</th>
                <th>----></th>
                <th>To </th>
                <th>FlightStart</th>
                <th>FlightEnd</th>
                <th>Company</th>
                <th>TravelTime</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < displayModel.Length; i++)
            {
            <tr>
                <td>@displayModel[i].Form</td>
                <td>---></td>
                <td>@displayModel[i].To</td>
                <td>@displayModel[i].FlightStart</td>
                <td>@displayModel[i].FlightEnd</td>
                <td>@displayModel[i].CompanyName</td>
                <td>@displayModel[i].TravelTime</td>
                <td>
                    <button class="btn btn-primary">Register for flight</button>
                </td>

            </tr>

            }


        </tbody>
    </table>
}





@code {
    DisplayModel[] displayModel;
    private string fromSearchString = string.Empty;
    private string toSearchString = string.Empty;
    int currentCount = 0;

    public void CountAndPost()
    {
        currentCount++;

        PriceService.PostRootData();

    }
    private async Task Filter()
    {
        displayModel = await PriceService.SearchForFlight(fromSearchString, toSearchString);
        StateHasChanged();
    }
    private async Task clear()
    {
        fromSearchString = string.Empty;
        toSearchString = string.Empty;
        StateHasChanged();
        displayModel = await PriceService.GetSpaceTravelDataDomain();
    }

    protected override async Task OnInitializedAsync()
    {
        displayModel = await PriceService.GetSpaceTravelDataDomain();
    }




}


