@page "/flights"

@inject IPriceListServices PriceService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService

<h1>Counter</h1>
<p>Current count: @currentCount</p>

@if (displayModels == null)
{
    <h2> Loading...</h2>
}
else
{
<div class="form-group">
    <label class="sr-only" for="filter-From">Filter</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="fromSearchString"
           placeholder="Filter By Location" />
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="toSearchString"
           placeholder="Filter By Destination" />
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="Company"
           placeholder="Filter By Company" />
    <button type="button" class="btn btn-primary mb-2 mr-sm-2" @onclick="Filter">Fliter</button>
    <button type="button" class="btn btn-primary mb-2" @onclick="clear">Clear</button>
    <h3 style="color:red">@errorString</h3>
</div>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th>From</th>
                <th>----></th>
                <th>To </th>
                <th>FlightStart</th>
                <th>FlightEnd</th>
                <th>Company</th>
                <th>TravelTime</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in displayModels)
            {
                <tr>
                    <td>@item.Form</td>
                    <td>---></td>
                    <td>@item.To</td>
                    <td>@item.FlightStart</td>
                    <td>@item.FlightEnd</td>
                    <td>@item.CompanyName</td>
                    <td>@item.Price€</td>


                    <td>
                        <button class="btn btn-primary" @onclick="(() => addToCart(item.ProviderId))">Register for flight</button>
                    </td>

                </tr>
            }


        </tbody>
    </table>
}





@code {

    List<DisplayModel> displayModels = new List<DisplayModel>();
    //  DisplayModel selectedFlight = new DisplayModel();
    private string fromSearchString = string.Empty;
    private string toSearchString = string.Empty;
    private string Company = null;
    private string errorString = string.Empty;

    int currentCount = 0;

    public void CountAndPost()
    {
        currentCount++;

        PriceService.PostRootData();

    }
    private async Task Filter()
    {
        displayModels = await PriceService.SearchForFlight(fromSearchString, toSearchString, Company);
        StateHasChanged();
    }
    private async Task clear()
    {
        fromSearchString = string.Empty;
        toSearchString = string.Empty;
        StateHasChanged();
        displayModels = await PriceService.GetSpaceTravelDataDomain();
    }

    protected override async Task OnInitializedAsync()
    {
        displayModels = await PriceService.GetSpaceTravelDataDomain();
        PriceService.PostRootData();
   
    }

    protected async Task addToCart(string ProviderId)
    {
        DateTime valid = await PriceService.GetValidUntil();

        //  if ( valid >= DateTime.Now)
        //  {
        var cart = await LocalStorage.GetItemAsync<List<DisplayModel>>("cart");
        if (cart == null)
        {
            cart = new List<DisplayModel>();
        }

        var selectedFlight = (from x in displayModels
                              where x.ProviderId == ProviderId
                              select x).First();
        cart.Add(selectedFlight);
        await LocalStorage.SetItemAsync("cart", cart);
        ToastService.ShowSuccess("Added To cart");
        //  }
        //   else
        //    {
        //    errorString = $"This price list is not valid anymore, it was valid until: {valid}. Please try again bit later!";
        //    }
        ////<button class="btn btn-primary" @onclick="@PriceService.ChekAndDeleteOldPriceList">UPDATE DB</button>


    }



    }



